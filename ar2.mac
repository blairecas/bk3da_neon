	;
	; addrs were moved up by 20000
	; because we haven't memory for other things (cause of extra neon code)
	;
	VSCR 	= C_VADDR		; SCREEN ADDRESS
	SCOREP 	= C_VADDR + 152		; SCORE	POSITION
	AMMOP 	= C_VADDR + 140		; AMMO POSITION
	MSGLN 	= C_VADDR + 4500	; MESSAGES POSITION
	MAPPOS 	= C_VADDR + 100		; MAP POSITION
	MNSPS	= C_VADDR + 20100	; MONSTERS POSITION
	;
	; buffers and vars
	;
	VIS	= 57400			; VISIBILITY MAP
	MAP	= 57000			; RUNTIME MAP
	; NOTE:	DO NOT CHANGE ORDER IN MEMORY
	FRBF1	= 56000			; HEIGNT
	FRBF2	= 56200			; COLOR
	FRBF3	= 56400			; PREV.HEIGHT
	FRBF4	= 56600			; PREV.COLOR
	; NOTE:	DO NOT CHANGE ORDER IN MEMORY
	;
	MNVSC	= 52000			; MONSTERS VIRT	SCREEN (2K)
	; NOTE:	NEED TO	BE 256B	BOUND ALIGN
	PSCTAB	= 47640			; SPRITE PRESCALLERS
	; NOTE:	SIZE 1120.=2140
	;
	; MONSTERS PROCESSING BUFFER (30.)
	MNBF	= 47164			; HUNTERS (5.)
	MNBFS	= 47246			; PROJECTILES (15.)
	MNBFX	= 47474			; AMMOS	(10.)
	MNBFE	= 47640			; END OF ALL ACTORS
	MNRS	= 10.			; SIZEOF(RECORD)
	;
	; UNROLLED DRAW	CODE BUFFER
	DD0	= 45762
	UR0	= 46162
	;
	HITRAD	= 18.			; HIT RADIUS(ONE CELL EDGE IS 64)
	SCLIMH	= 50.			; SCORE	LIMIT for monsters
	SCLIMP	= 25.			; SCORE LIMIT for player
	; GAME STATES
	GSEXIT	= 0.			; EXIT
	GSGAME	= 1.			; GAME RUNNING
	GSPAUS	= 2.			; PAUSE
	GSPLWN	= 4.			; PLAYER WON
	GSHTWN	= 8.			; HUNTERS WON
	;
	MAXAMMO	 =50.			; maximal ammo count
	HALFAMMO =30.			; amount of ammo after that ammo is not taking

	;
GSTART:	CLR BITFLD
	CLR AMAP
	JMP GOTIT
	;
	; VARIABLES
	;
GSTATE:	.WORD 0		; GAME STATE
	;
	; 0=EXIT
	; 1=GAME RUNNING
	; 2=PAUSED
	; 3=THE	PLAYER WON
	; 4=THE	HUNTERS	WON
	;
BITFLD:	.WORD 0		; TAB,KT,ENTER AND SAME	FLAGS
KEYCOD:	.BYTE 0		; KEY SCAN CODE
TKCNTR:	.BYTE 0		; TICK COUNTER
PRCNTR:	.BYTE 0		; PREV.TICK COUNTER
FRCNTR:	.BYTE 0		; FRAME	COUNTER
	.EVEN
	;
	; GAME AMMO&OUTPUT
AMMO:	.BYTE 10.
OLDAM:	.BYTE 1.
	.EVEN
	;
	; GAME SCORE&OUTPUT
SCORE:	.BYTE 0.,0.
OLDSCR:	.BYTE 1.,0.
	.EVEN
	;
	; PLAYER VARS (WILL BE LOADED WITH MAP)
PLX:	.WORD 0
PLY:	.WORD 0
PLA:	.WORD 0
SPLX:	.WORD 0
SPLY:	.WORD 0
SPLA:	.WORD 0

	;
	; SINGLE PRESS CHECK
SCFLG:	MOVB TKCNTR,R0
	MOVB PRCNTR,R1
	MOVB R0,PRCNTR
	INCB R1
	CMPB R1,R0
	RET

;
; CONTROLS PROCESSING
JOY:
	tst	KeyLeft
	beq	10$
	tst	KeyShift
	bne	08$
	call	DLFT
	br	10$
08$:	call	DSL
10$:	tst	KeyRight
	beq	20$
	tst	KeyShift
	bne	18$
	call	DRGHT
	br	20$
18$:	call	DSR
20$:	tst	KeyUp
	beq	30$
	call	DUP
30$:	tst	KeyDown
	beq	40$
	call	DDWN
40$:	tst	KeySpace
	beq	50$
	call	DSPC
50$:	tst	KeyTab
	beq	60$
	call	DTAB
60$: 	tst	KeyAp2
	beq	70$
	mov	#GSEXIT, GState
70$:	tst	KeyEnter
	beq	80$
	clr	KeyEnter
	call	DPAUS
80$:	;
	return

	;
	; LOAD MAP
	; R0=MAP NUMBER	0..N
LMAP:	CLRB FRCNTR	; FRAME	COUNTER
	CALL PREPM	; PREPARE RUNTIME MAP &	PLAYER POSITION
	CALL CLVIS	; CLEAR	VISIBILITY MAP
	CALL MNSET	; SET MONSTERS
	CALL PREPR	; PREPARE RENDER OUTPUT
	CALL INISCR	; RESET	SCORE
	CALL INIAM	; RESET	AMMO
	RET
	;
	; INC FRAME COUNTER
	; USED IN VISIBILITY MAP
	; SHOULD BE 0,2,4...
IFRC:	MOVB FRCNTR,R0
	INCB R0
	INCB R0
	MOVB R0,FRCNTR
	BNE 1$
	CALL CLVIS	; CLEAR	VISIBILITY MAP
1$:	RET
	;
GO:	clr	SndBm
;	CALL NOSND	; NO SOUNDS
	CALL PREP0	; MAKE UNROLLED	CODE
	CALL CLPSC	; CALC PRESCALLERS
	CALL DRST2	; RESTART LEVEL
	;
	CALL STRTIM	; START	TIMER THREAD
	;
	; MAIN LOOP
ML:	;
	inc	FrameCount
	;
	CALL SYNCP	; SYNC PLAYER WITH THREAD
	CALL IFRC	; FOR VISIBILITY MAP
	CALL RENDR	; RENDER WALLS
	CALL MNPRC	; RENDER&DRAW MONSTERS
	CALL DRDIFF	; DRAW WALLS
	;
	CALL PRNSCR	; PRINT	SCORE
	CALL PRNAM	; PRINT	AMMO
	CALL DRCRH	; DR.CROSSHAIR
;	CALL PRCSEF	; PLAY SOUNDS
;	CLR SNDBM	; CLEAR	SOUNDS BITMAP
	;
ML2:	;IOT		; WILL BE NOP FOR NON BK0010
	call	N100
	;
	CALL DOMAP	; PROCESS MAP
	CALL DORST	; PROCESS RESTART
	MOV GSTATE,R0	; CHECK	GAME STATE
	BEQ 1$		; 0=EXIT
	ASR R0
	BEQ ML		; 1=GAME RUNNING
	ASR R0
	BEQ ML2		; 2=GAME PAUSED
	ASR R0
	BEQ ML		; 4=PLAYER WON
	ASR R0
	BEQ ML		; 8=HUNTERS WON
	; RESERVED: OTHER CASES
	BR ML		; AND GO BACK TO MAIN LOOP
	;
1$:	CALL STPTIM	; GAME EXIT - STOP TIMER THREAD
	RET
	;
	; DO RESTART
DORST:	BIT #4,BITFLD	; CHECK	FOR RESTART PRESSED
	BEQ 1$
	BIC #4,BITFLD	; CLEAR	FLAG
	CALL STPTIM
2$:	BIT #40000,BITFLD
	BNE 2$
	CALL DRST2
	CALL STRTIM
1$:	RET
	; PROCESS MAP
DOMAP:	BIT #1,BITFLD	; CHECK	FOR TAB	PRESSED
	BEQ 2$		; NOT PRESSED
	BIC #1,BITFLD	; CLEAR	PRESSED	FLAG
	BIT #2,BITFLD	; CHECK	STATE
	BNE 1$		; NEED DRAW
	CALL CLMAP	; NEED CLEAR
	RET
1$:	CALL DRMAP
	CALL DRALL
	RET
2$:	BIT #2,BITFLD	; NEED DRAW MAP?
	BEQ 3$
	CMP #GSPAUS,GSTATE
	BEQ 3$
	CALL DRALL	; DRAW ALL
3$:	RET
	;
	; DO KT	(EXIT)
DEXIT:	CLR GSTATE
	RET
	; DO TAB
DTAB:	CALL SCFLG
	BEQ 1$
	MOV #2,R0
	XOR R0,BITFLD	; SWITCH TAB FLAG
	BIS #1,BITFLD	; SET TAB PRESSED FLAG
1$:	RET
	; DO SPACE
DSPC:	CALL SCFLG
	BEQ 1$
	CALL DPROJ1
1$:	RET
	; SET PLAYER
SETPL:	MOV R0,PLX
	MOV R1,PLY
	RET
	; GET PLAYER DIRECTION
	; OUT: R0=VX,R1=VY
GETDIR:	MOV PLA,R0
	CALL GSNCS
	RET
	; DO DOWN
DDWN:	CALL GETDIR
DDWN2:	MOV R0,R2
	MOV R1,R3
	NEG R0
	NEG R1
	ADD PLX,R0
	ADD PLY,R1
	CALL CHECK
	BNE 1$
	CALL SETPL
	BR 3$
1$:	ADD R3,R1
	CALL CHECK
	BNE 2$
	CALL SETPL
	BR 3$
2$:	SUB R3,R1
	ADD R2,R0
	CALL CHECK
	BNE 3$
	CALL SETPL
3$:	RET
	; DO UP
DUP:	CALL GETDIR
DUP2:	MOV R0,R2
	MOV R1,R3
	ADD PLX,R0
	ADD PLY,R1
	CALL CHECK
	BNE 1$
	CALL SETPL
	BR 3$
1$:	SUB R3,R1
	CALL CHECK
	BNE 2$
	CALL SETPL
	BR 3$
2$:	ADD R3,R1
	SUB R2,R0
	CALL CHECK
	BNE 3$
	CALL SETPL
3$:	RET
	; DO SHIFT LEFT
DSL:	CALL GETDIR
	XOR R0,R1
	XOR R1,R0
	XOR R0,R1
	NEG R1
	JMP DUP2
	; DO SHIFT RIGHT
DSR:	CALL GETDIR
	XOR R0,R1
	XOR R1,R0
	XOR R0,R1
	NEG R1
	JMP DDWN2
	; DO LEFT
DLFT:	DEC PLA
	BPL 1$
	MOV #71.,PLA
1$:	RET
	; DO RIGHT
DRGHT:	INC PLA
	CMP PLA,#72.
	BLO 1$
	CLR PLA
1$:	RET
	; DO 180 ROTATE
DROT:	CALL SCFLG
	BEQ 2$
	MOV PLA,R0
	ADD #36.,R0
	CMP R0,#72.
	BLO 1$
	SUB #72.,R0
1$:	MOV R0,PLA
2$:	RET
	; DO PAUSE
DPAUS:	CALL SCFLG
	BEQ 1$
	CMP GSTATE,#GSGAME
	BNE 2$
	; GAME RUNNING->PAUSE IT
	MOV #GSPAUS,GSTATE	; PAUSE
	CLR R5
	CALL PRNMS
	BR 1$
2$:	CMP GSTATE,#GSPAUS
	BNE 1$
	; GAME PAUSED->RUN IT
	MOV #GSGAME,GSTATE	; RUNNING
	CALL CLMS
1$:	RET
	; RESTART GAME
DREST:	CALL SCFLG
	BEQ 1$
	CMP GSTATE,#GSPLWN
	BEQ 2$
	CMP GSTATE,#GSHTWN
	BEQ 2$
1$:	RET
2$:	BIS #4,BITFLD		; SET FLAG TO RESTART
	RET
DRST2:	CLR SNDBM		; CLEAR	SOUNDS BITMAP
	MOV (PC)+,R0
AMAP:	.WORD 0
	CALL LMAP		; LOAD MAP
	MOV #GSGAME,GSTATE	; RUNNING
	CALL CLMS
	BIT #2,BITFLD
	BEQ 1$
	CALL DRMAP
1$:	RET
	;
