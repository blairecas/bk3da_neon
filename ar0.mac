	;
	; screen and buffers were moved up by 20000
	; because we haven't memory for other things (cause of extra neon code)
	;
	VSCR=60000	; SCREEN ADDRESS
	SCOREP=60152	; SCORE	POSITION
	AMMOP=60140	; AMMO POSITION
	MSGLN=64500	; MESSAGES POSITION
	MAPPOS=60100	; MAP POSITION
	MNSPS=100100	; MONSTERS POSITION
	;
	VIS=57400	; VISIBILITY MAP
	MAP=57000	; RUNTIME MAP
	; NOTE:	DO NOT CHANGE ORDER IN MEMORY
	FRBF1=56000	; HEIGNT
	FRBF2=56200	; COLOR
	FRBF3=56400	; PREV.HEIGHT
	FRBF4=56600	; PREV.COLOR
	; NOTE:	DO NOT CHANGE ORDER IN MEMORY
	;
	MNVSC=52000	; MONSTERS VIRT	SCREEN (2K)
	; NOTE:	NEED TO	BE 256B	BOUND ALIGN
	PSCTAB=47640	; SPRITE PRESCALLERS
	; NOTE:	SIZE 1120.=2140
	;
	; MONSTERS PROCESSING BUFFER (30.)
	MNBF=46604	; HUNTERS (5.)
	MNBFS=46736	; PROJECTILES (15.)
	MNBFX=47354	; AMMOS	(10.)
	MNBFE=47640	; END OF ALL ACTORS
	MNRS=18.	; SIZEOF(RECORD)
	;
	; UNROLLED DRAW	CODE BUFFER
	DD0=45402
	UR0=45602
	;
	HITRAD=16.	; HIT RADIUS(ONE CELL EDGE IS 64)
	SCLIMH=50.	; SCORE	LIMIT for monsters
	SCLIMP=25.	; SCORE LIMIT for player
	; GAME STATES
	GSEXIT=0.	; EXIT
	GSGAME=1.	; GAME RUNNING
	GSPAUS=2.	; PAUSE
	GSPLWN=4.	; PLAYER WON
	GSHTWN=8.	; HUNTERS WON
	;
	MAXAMMO=50.	; maximal ammo count
	HALFAMMO=30.	; amount of ammo after that ammo is not taking

	;
GSTART:	CLRB SHMAP
	CLR AMAP
	JMP GOTIT
	;
	; VARIABLES
	;
GSTATE:	.WORD 0		; GAME STATE
	;
	; 0=EXIT
	; 1=GAME RUNNING
	; 2=PAUSED
	; 3=THE	PLAYER WON
	; 4=THE	HUNTERS	WON
	;
SHMAP:	.BYTE 0		; 1=SHOW MAP FLAG
PRCNTR:	.BYTE 0		; PREV.FR.COUNTER
FRCNTR:	.BYTE 0		; FRAME	COUNTER
KEYCOD:	.BYTE 0		; KEY SCAN CODE
	.EVEN
	;
	; GAME AMMO&OUTPUT
AMMO:	.BYTE 10.
OLDAM:	.BYTE 1.
	.EVEN
	;
	; GAME SCORE&OUTPUT
SCORE:	.BYTE 0.,0.
OLDSCR:	.BYTE 1.,0.
	.EVEN
	;
	; PLAYER VARS (WILL BE LOADED WITH MAP)
PLX:	.WORD 0
PLY:	.WORD 0
OPLX:	.WORD 0
OPLY:	.WORD 0
PLA:	.WORD 0

;
;PROCS:	.WORD DROT
;	.WORD DROT
;	.WORD DSL
;	.WORD DSL
;	.WORD DSR
;	.WORD DSR
;	.WORD DUP
;	.WORD DUP
;	.WORD DDWN
;	.WORD DDWN
;	.WORD DLFT
;	.WORD DRGHT
;	.WORD DTAB
;	.WORD DSPC
;	.WORD DPAUS
;	.WORD DEXIT
;	.WORD DREST

;
RULES:	.WORD 177772	; 1,4
	.WORD 177772	; 1,4
	.WORD 177772	; 1,4
	.WORD 177772	; 1,4
	.WORD 177772	; 1,4
	.WORD 177772	; 1,4
	.WORD 177772	; 1,4
	.WORD 177772	; 1,4
	.WORD 177772	; 1,4
	.WORD 177772	; 1,4
	.WORD 177772	; 1,4
	.WORD 177772	; 1,4
	.WORD 177760	; 1,2,4,8
	.WORD 177772	; 1,4
	.WORD 177774	; 1,2
	.WORD 177760	; 1,2,4,8
	.WORD 177763	; 4,8
	;


;
; sounds
; 
; sound bitmap: (bits) 0-menu tick, 1-take ammo, 2-???, 4-hit, 8-fire
	SND_AMMO = 01.
	SND_FIRE = 02.
	SND_HIT  = 04.
	SND_MENU = 08.	
SNDBM:	.word	0
;


; SINGLE PRESS CHECK
SCFLG:	MOVB PRCNTR,R0
	MOVB FRCNTR,PRCNTR
	INCB R0		; SAME AS IN MAIN LOOP
	INCB R0		; SAME DOUBLE
	CMPB R0,FRCNTR
	RET 

;
; CONTROLS PROCESSING
JOY:
	tst	KeyLeft
	beq	10$
	tst	KeyShift
	bne	08$
	call	DLFT
	br	10$
08$:	call	DSL
10$:	tst	KeyRight
	beq	20$
	tst	KeyShift
	bne	18$
	call	DRGHT
	br	20$
18$:	call	DSR
20$:	tst	KeyUp
	beq	30$
	call	DUP
30$:	tst	KeyDown
	beq	40$
	call	DDWN
40$:	tst	KeySpace
	beq	50$
	call	DSPC
50$:	tst	KeyTab
	beq	60$
	call	DTAB
60$: 	tst	KeyAp2
	beq	70$
	mov	#GSEXIT, GState
70$:	tst	KeyEnter
	beq	80$
	clr	KeyEnter
	call	DPAUS
80$:	;
	return

	;
	; LOAD MAP
	; R0=MAP NUMBER	0..N
LMAP:	CLRB FRCNTR	; FRAME	COUNTER
	CLRB PRCNTR	; PREV.	FRAME COUNTER
	CALL PREPM	; PREPARE RUNTIME MAP &	PLAYER POSITION
	CALL CLVIS	; CLEAR	VISIBILITY MAP
	CALL MNSET	; SET MONSTERS
	CALL PREPR	; PREPARE RENDER OUTPUT
	CALL INISCR	; RESET	SCORE
	CALL INIAM	; RESET	AMMO
	RET
	;
GO:	CALL PREP0	; MAKE UNROLLED	CODE
	CALL CLPSC	; CALC PRESCALLERS
	CALL DRST2	; RESTART LEVEL
	;
	; MAIN LOOP
ML:	inc	FrameCount
	CALL MNMOV	; MONSTERS MOVE
	CALL MNDRW	; DRAW MONSTERS	ON MAP
	CALL RENDR	; RENDER
	CALL MNPRC	; PROCESS MONSTERS
	CALL DRDIFF	; DRAW INTO SCREEN
	CALL PRNSCR	; PRINT	SCORE
	CALL PRNAM	; PRINT	AMMO
ML2:	INCB FRCNTR	; USED IN VISIBILITY CHECKS
	INCB FRCNTR	; DOUBLE TO MAKE INPOSSIBLE EVENS
	BNE NZR
	CALL CLVIS	; CLEAR	VISIBILITY MAP
NZR:	CALL JOY
	MOV GSTATE,R0	; CHECK	GAME STATE
	BEQ 1$		; 0=EXIT
	ASR R0
	BEQ ML		; 1=GAME RUNNING
	ASR R0
	BEQ ML2		; 2=GAME PAUSED
	ASR R0
	BEQ ML		; 4=PLAYER WON
	;
	;MOV MNBF+8.,PLA
	CALL SETTA
	MOV MNBF+6.,R1
	MOV MNBF+4.,R0
	CALL SETPL
	;
	BR ML		; AND GO BACK TO MAIN LOOP
1$:	RET		; GAME EXIT
	;
	; DO KT	(EXIT)
DEXIT:	CLR GSTATE
	RET
	; DO TAB
DTAB:	CALL SCFLG
	BEQ 1$
	TSTB SHMAP
	BEQ 2$
	CLRB SHMAP
	CALL CLRM
	BR 1$
2$:	CALL DRAWM
	INCB SHMAP
	CALL DRAWP	; DRAW PLAYER ON MAP
1$:	RET
	; DO SPACE
DSPC:	CALL SCFLG
	BEQ 1$
	CALL DPROJ1
1$:	RET
	; SET PLAYER
SETPL:	MOV PLX,OPLX
	MOV PLY,OPLY
	MOV R0,PLX
	MOV R1,PLY
	CALL DRAWP	; DRAW PLAYER ON MAP
	RET
	; GET PLAYER DIRECTION
	; OUT: R0=VX,R1=VY
GETDIR:	MOV PLA,R0
	CALL GSNCS
	RET
	; DO DOWN
DDWN:	CALL GETDIR
DDWN2:	MOV R0,R2
	MOV R1,R3
	NEG R0
	NEG R1
	ADD PLX,R0
	ADD PLY,R1
	CALL CHECK
	BNE 1$
	CALL SETPL
	BR 3$
1$:	ADD R3,R1
	CALL CHECK
	BNE 2$
	CALL SETPL
	BR 3$
2$:	SUB R3,R1
	ADD R2,R0
	CALL CHECK
	BNE 3$
	CALL SETPL
3$:	RET
	; DO UP
DUP:	CALL GETDIR
DUP2:	MOV R0,R2
	MOV R1,R3
	ADD PLX,R0
	ADD PLY,R1
	CALL CHECK
	BNE 1$
	CALL SETPL
	BR 3$
1$:	SUB R3,R1
	CALL CHECK
	BNE 2$
	CALL SETPL
	BR 3$
2$:	ADD R3,R1
	SUB R2,R0
	CALL CHECK
	BNE 3$
	CALL SETPL
3$:	RET
	; DO SHIFT LEFT
DSL:	CALL GETDIR
	XOR R0,R1
	XOR R1,R0
	XOR R0,R1
	NEG R1
	JMP DUP2
	; DO SHIFT RIGHT
DSR:	CALL GETDIR
	XOR R0,R1
	XOR R1,R0
	XOR R0,R1
	NEG R1
	JMP DDWN2
	; DO LEFT
DLFT:	DEC PLA
	BPL 1$
	MOV #71.,PLA
1$:	RET
	; DO RIGHT
DRGHT:	INC PLA
	CMP PLA,#72.
	BLO 1$
	CLR PLA
1$:	RET
	; DO 180 ROTATE
DROT:	CALL SCFLG
	BEQ 2$
	MOV PLA,R0
	ADD #36.,R0
	CMP R0,#72.
	BLO 1$
	SUB #72.,R0
1$:	MOV R0,PLA
2$:	RET
	; DO PAUSE
DPAUS:	CALL SCFLG
	BEQ 1$
	CMP GSTATE,#GSGAME
	BNE 2$
	; GAME RUNNING->PAUSE IT
	MOV #GSPAUS,GSTATE	; PAUSE
	CLR R5
	CALL PRNMS
	BR 1$
2$:	CMP GSTATE,#GSPAUS
	BNE 1$
	; GAME PAUSED->RUN IT
	MOV #GSGAME,GSTATE	; RUNNING
	CALL CLMS
1$:	RET
	; DO RESTART GAME
DREST:	CALL SCFLG
	BEQ 1$
	CMP GSTATE,#GSPLWN
	BEQ DRST2
	CMP GSTATE,#GSHTWN
	BEQ DRST2
1$:	RET
DRST2:	; TODO: mute sounds if any
	MOV (PC)+,R0
AMAP:	.WORD 0
	CALL LMAP		; LOAD MAP
	MOV #GSGAME,GSTATE	; RUNNING
	CALL CLMS
	TSTB SHMAP		; IF MAP VISIBLE THEN REDRAW
	BEQ 1$
	CALL CLRM
	CALL DRAWM
	CALL DRAWP
1$:	RET
	;
